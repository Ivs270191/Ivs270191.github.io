import React from "react";
import { useEffect, useState } from "react";
import qs from "qs";

// import Categories from "../components/Categories";
// import PizzaBlock from "../components/PizzaBlock";
// import Sort from "../components/Sort";
// import Skeleton from "../components/Sekeleton";
import { Categories, PizzaBlock, Sort, Skeleton } from "../components"; // –ø—Ä–∏–º–µ—Ä —Ä–µ-–µ–∫—Å–ø–æ—Ä—Ç–∞

// import Pagination from "../components/Pagination/Pagination";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { setSelectedCategory, setSelectedType } from "../redux/slices/filters";
import { fetchPizzas } from "../redux/slices/pizzaSlice";
import { RootState, useAppDispatch } from "../redux/store";

const Home = () => {
  //   const [isLoading, setIsLoading] = useState(true);
  const dispatch = useAppDispatch();
  const [ascDesc, setAscDesc] = useState(false);
  //   const [currentPage , setCurrentPage] = useState(1) //–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –º–æ–∫–ê–ø–∏

  const { selectedCategory, selectedType } = useSelector(
    (state: RootState) => state.filterSlice
  );
  const { items, status } = useSelector((state: RootState) => state.pizzaSlice);

  const { searchInput } = useSelector((state: RootState) => state.filterSlice);

  const navigate = useNavigate();

  const getPizzas = async () => {
    dispatch(
      fetchPizzas(
        `items?title=${searchInput}&category=${
          selectedCategory > 0 ? selectedCategory : ""
        }&sortBy=${selectedType}&order=${ascDesc ? "desc" : "asc"}`
      )
    );

    // // setTimeout(() => {
    // //   setIsLoading(false);
    // //   dispatch(setItems(res));
    // // }, 500); // —á–∏—Å—Ç–æ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ —Å–∫–µ–ª–µ—Ç–∞
    // window.scrollTo(0, 0); // –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–∞ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
  };
  //   const pizzas = items
  //     .filter((item) => {
  //       if (item.title.toLowerCase().includes(searchInput.toLowerCase())) {
  //         return true;
  //       } // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∏–Ω–ø—É—Ç–∞
  //       return false;
  //     })
  //     .map((obj) => <PizzaBlock key={obj.id} {...obj} />); // —Ä–µ–Ω–¥–µ—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

  const skeletons = [...new Array(8)].map((_, i) => (
    <Skeleton key={`${i} + skeleton`} />
  ));

  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      dispatch(setSelectedCategory(Number(params.selectedCategory)));
      dispatch(setSelectedType(String(params.selectedType)));
    }
  }, []); // –¥–ª—è –ø—Ä–∏–Ω–∏–º–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —é—Ä–ª , –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —Å—Ç—Ä–æ–∫—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã–π —é—Ä–ª
  useEffect(() => {
    if (selectedCategory === 0) {
      navigate("/"); // –º–µ–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–∏–¥—ã–≤–∞–µ—Ç –ø—É—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π
    }
    if (selectedCategory > 0) {
      const queryString = qs.stringify({
        selectedCategory,
        selectedType,
      });
      navigate(`?${queryString}`); // –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–µ—Ç –≤ —é—Ä–ª —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å-—Å—Å—ã–ª–∫—É
    }
  }, [selectedCategory, selectedType]);

  useEffect(() => {
    getPizzas();
  }, [selectedCategory, selectedType, ascDesc, searchInput]);
  return (
    <>
      <div className="content__top">
        <Categories />
        <Sort setAscDesc={setAscDesc} ascDesc={ascDesc} />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      <div className="content__items">
        {status === "error" ? (
          <div className="content__error-info">
            <h2>
              –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ <span>üòï</span>
            </h2>
            <p>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
          </div>
        ) : status === "loading" ? (
          skeletons
        ) : items.length > 0 ? (
          items.map((obj) => <PizzaBlock key={obj.id + obj.types} {...obj} />)
        ) : (
          []
        )}
      </div>
      {/* <Pagination currentPage={currentPage} setCurrentPage={setCurrentPage} /> */}
    </>
  );
};

export default Home;
